@top Query { "query" argsOpening constraint (argsDelimiter constraint)* argsClosing }

@skip { space | Comment }

constraint {
    HeadConstraint |
    FilterConstraint
}

HeadConstraint {
    collection { "collection" argsOpening classifierToken argsClosing }
}

FilterConstraint {
    filterBy { "filterBy" argsOpening FilterConstraint (argsDelimiter FilterConstraint)* argsClosing } |
    filterGroupBy { "filterGroupBy" argsOpening FilterConstraint (argsDelimiter FilterConstraint)* argsClosing } |
    and { "and" argsOpening FilterConstraint (argsDelimiter FilterConstraint)* argsClosing } |
    attributeEquals { "attributeEquals" argsOpening valueToken argsClosing }
}

classifierToken {
    String
}

valueToken {
    String |
    Int |
    Float |
    Boolean |
    Date |
    Time |
    DateTime |
    OffsetDateTime |
    Range {
        emptyRange { "[" "," "]" ~range } |
        dateTimeRange { "[" OffsetDateTime? "," OffsetDateTime? "]" ~range } |
        floatNumberRange { "[" Float? "," Float? "]" ~range } |
        intNumberRange { "[" Int? "," Int? "]" ~range }
    } |
    Uuid |
    Enum
}

@tokens {
    String {
        ('"' (!["\\] | "\\" _)* '"') |
        ('\'' (!["\\] | "\\" _)* '\'')
    }

    Int { "-"? @digit+ }

    Float { "-"? @digit+ "." @digit+ }

    Boolean { "true" | "false" }

    Date { @digit @digit @digit @digit "-" @digit @digit "-" @digit @digit }

    Time { @digit @digit ":" @digit @digit ":" @digit @digit ("." @digit+)? }

    DateTime { Date "T" Time }

    OffsetDateTime { DateTime ("+" | "-") @digit @digit ":" @digit @digit }

    Uuid { $[a-z0-9]+ "-" $[a-z0-9]+ "-" $[a-z0-9]+ "-" $[a-z0-9]+ "-" $[a-z0-9]+ }

    Enum { @asciiUppercase+ ("_" @asciiUppercase+)* }

    argsOpening { "(" }

    argsClosing { ")" }

    argsDelimiter { "," }

    Comment { "//" ![\n]* }

    space { $[ \t\n\r]+ }

    @precedence {
        String,
        OffsetDateTime,
        DateTime,
        Date,
        Time,
        Float,
        Int,
        Boolean,
        Uuid,
        Enum
    }
}

@detectDelim