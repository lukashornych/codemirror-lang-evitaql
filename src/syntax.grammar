@top QueryRequest { Query }

@top ConstraintListRequest { (Constraint (argsDelimiter Constraint)*)? }

@skip { space | Comment }

Query { "query" QueryBody }

QueryBody { ArgsOpening (RootConstraint (argsDelimiter RootConstraint)*) ArgsClosing }

/* todo temporary separation of constraint types before we have full LSP completion/linter */
RootConstraint { ("collection" | "filterBy" | "orderBy" | "require") ConstraintBody }

Constraint { constraintName ConstraintBody }

ConstraintBody { ArgsOpening (arg (argsDelimiter arg)*)? ArgsClosing }

arg {
    valueToken |
    Constraint
}

valueToken {
    PositionalParameter |
    NamedParameter |
    String |
    Int |
    Float |
    Boolean |
    Date |
    Time |
    DateTime |
    OffsetDateTime |
    Range {
        emptyRange { "[" "," "]" ~range } |
        dateTimeRange { "[" OffsetDateTime? "," OffsetDateTime? "]" ~range } |
        floatNumberRange { "[" Float? "," Float? "]" ~range } |
        intNumberRange { "[" Int? "," Int? "]" ~range }
    } |
    Uuid |
    Enum
}

@tokens {
constraintName {
    "and" |
    "associatedDataContent" |
    "associatedDataContentAll" |
    "attributeBetween" |
    "attributeContains" |
    "attributeContent" |
    "attributeContentAll" |
    "attributeEndsWith" |
    "attributeEquals" |
    "attributeEqualsFalse" |
    "attributeEqualsTrue" |
    "attributeGreaterThan" |
    "attributeGreaterThanEquals" |
    "attributeHistogram" |
    "attributeInRange" |
    "attributeInRangeNow" |
    "attributeInSet" |
    "attributeIs" |
    "attributeIsNotNull" |
    "attributeIsNull" |
    "attributeLessThan" |
    "attributeLessThanEquals" |
    "attributeNatural" |
    "attributeSetExact" |
    "attributeSetInFilter" |
    "attributeStartsWith" |
    "children" |
    "collection" |
    "dataInLocales" |
    "dataInLocalesAll" |
    "debug" |
    "directRelation" |
    "distance" |
    "entityFetch" |
    "entityFetchAll" |
    "entityFetchAllAnd" |
    "entityFetchAllContent" |
    "entityFetchAllContentAnd" |
    "entityGroupFetch" |
    "entityGroupFetchAll" |
    "entityGroupProperty" |
    "entityHaving" |
    "entityLocaleEquals" |
    "entityPrimaryKeyExact" |
    "entityPrimaryKeyInFilter" |
    "entityPrimaryKeyInSet" |
    "entityPrimaryKeyNatural" |
    "entityProperty" |
    "excluding" |
    "excludingRoot" |
    "facetCalculationRules" |
    "facetGroupsConjunction" |
    "facetGroupsDisjunction" |
    "facetGroupsExclusivity" |
    "facetGroupsNegation" |
    "facetHaving" |
    "facetSummary" |
    "facetSummaryOfReference" |
    "filterBy" |
    "filterGroupBy" |
    "fromNode" |
    "fromRoot" |
    "gap" |
    "having" |
    "head" |
    "hierarchyContent" |
    "hierarchyOfReference" |
    "hierarchyOfSelf" |
    "hierarchyWithin" |
    "hierarchyWithinRoot" |
    "hierarchyWithinRootSelf" |
    "hierarchyWithinSelf" |
    "inScope" |
    "includingChildren" |
    "includingChildrenExcept" |
    "includingChildrenHaving" |
    "label" |
    "lambda$entityPrimaryKeyInSet$2" |
    "lambda$entityPrimaryKeyInSet$3" |
    "lambda$priceInPriceLists$0" |
    "lambda$priceInPriceLists$1" |
    "level" |
    "limit" |
    "node" |
    "not" |
    "or" |
    "orderBy" |
    "orderGroupBy" |
    "page" |
    "parents" |
    "pickFirstByEntityProperty" |
    "priceBetween" |
    "priceContent" |
    "priceContentAll" |
    "priceContentRespectingFilter" |
    "priceDiscount" |
    "priceHistogram" |
    "priceInCurrency" |
    "priceInPriceLists" |
    "priceNatural" |
    "priceType" |
    "priceValidIn" |
    "priceValidInNow" |
    "queryTelemetry" |
    "random" |
    "randomWithSeed" |
    "referenceContent" |
    "referenceContentAll" |
    "referenceContentAllWithAttributes" |
    "referenceContentWithAttributes" |
    "referenceHaving" |
    "referenceProperty" |
    "require" |
    "scope" |
    "segment" |
    "segments" |
    "siblings" |
    "spacing" |
    "statistics" |
    "stopAt" |
    "strip" |
    "traverseByEntityProperty" |
    "userFilter"
}


    PositionalParameter { "?" }

    NamedParameter { "@" @asciiLowercase $[a-zA-Z0-9]*  }

    String {
        /* todo this probably doesn't support all needed escaping case with cross quotation marks, this will need more testing */
        ('"' doubleQuotationChar* '"') |
        ('\'' (![\'\\] | "\\" _)* '\'')
    }
    doubleQuotationChar { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" doubleQuotationEsc }
    doubleQuotationEsc  { $["\\\/bfnrt] | "u" hex hex hex hex }
    hex  { $[0-9a-fA-F] }

    Int { "-"? @digit+ }

    Float { "-"? @digit+ "." @digit+ }

    Boolean { "true" | "false" }

    Date { @digit @digit @digit @digit "-" @digit @digit "-" @digit @digit }

    Time { @digit @digit ":" @digit @digit ":" @digit @digit ("." @digit+)? }

    DateTime { Date "T" Time }

    OffsetDateTime { DateTime ("+" | "-") @digit @digit ":" @digit @digit }

    Uuid { $[a-z0-9]+ "-" $[a-z0-9]+ "-" $[a-z0-9]+ "-" $[a-z0-9]+ "-" $[a-z0-9]+ }

    Enum { @asciiUppercase+ ("_" @asciiUppercase+)* }

    argsDelimiter { "," }

    ArgsOpening { "(" }

    ArgsClosing { ")" }

    Comment { "//" ![\n]* }

    space { $[ \t\n\r]+ }

    @precedence {
        constraintName,
        String,
        OffsetDateTime,
        DateTime,
        Date,
        Time,
        Float,
        Int,
        Boolean,
        Uuid,
        Enum,
        NamedParameter,
        PositionalParameter
    }
}

@detectDelim